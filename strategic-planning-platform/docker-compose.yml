version: '3.8'

services:
  # Frontend - Nuxt.js 4 Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: strategic-planning-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NITRO_PORT=3000
      - NITRO_HOST=0.0.0.0
      - API_BASE_URL=http://backend:8000
      - WEBSOCKET_URL=ws://backend:8001
    volumes:
      - ./frontend/public:/app/public:ro
    depends_on:
      - backend
    networks:
      - strategic-planning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`strategic-planning.local`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

  # Backend - FastAPI Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: strategic-planning-backend
    ports:
      - "8000:8000"  # API
      - "8001:8001"  # WebSocket
    environment:
      - PYTHONPATH=/app
      - FASTAPI_ENV=production
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=${NEO4J_USERNAME:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - GRAPHRAG_ENDPOINT=${GRAPHRAG_ENDPOINT:-http://graphrag-service:8002}
      - VECTOR_INDEX_NAME=${VECTOR_INDEX_NAME:-requirements_index}
      - EMBEDDING_DIMENSIONS=${EMBEDDING_DIMENSIONS:-1536}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - S3_BUCKET=${S3_BUCKET}
      - S3_REGION=${S3_REGION:-us-east-1}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
      - ENABLE_WEBSOCKETS=${ENABLE_WEBSOCKETS:-true}
      - ENABLE_GRAPHRAG=${ENABLE_GRAPHRAG:-true}
      - ENABLE_REAL_TIME_COLLABORATION=${ENABLE_REAL_TIME_COLLABORATION:-true}
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - ./shared:/app/shared:ro
    depends_on:
      - postgres
      - redis
      - neo4j
    networks:
      - strategic-planning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.strategic-planning.local`)"
      - "traefik.http.services.api.loadbalancer.server.port=8000"

  # PostgreSQL - User/Auth Database
  postgres:
    image: postgres:15-alpine
    container_name: strategic-planning-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-strategic_planning}
      - POSTGRES_USER=${POSTGRES_USER:-strategic_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/postgres/init:/docker-entrypoint-initdb.d:ro
      - ./database/postgres/backups:/backups
    networks:
      - strategic-planning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-strategic_user} -d ${POSTGRES_DB:-strategic_planning}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: |
      postgres -c max_connections=100
               -c shared_buffers=256MB
               -c effective_cache_size=1GB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.9
               -c wal_buffers=16MB
               -c default_statistics_target=100
               -c random_page_cost=1.1
               -c effective_io_concurrency=200
               -c work_mem=4MB
               -c min_wal_size=1GB
               -c max_wal_size=4GB
               -c log_statement=mod
               -c log_destination=stderr
               -c logging_collector=on
               -c log_directory=/var/lib/postgresql/data/logs
               -c log_filename=postgresql-%Y-%m-%d.log
               -c log_rotation_age=1d
               -c log_rotation_size=100MB

  # Redis - Sessions and Caching
  redis:
    image: redis:7-alpine
    container_name: strategic-planning-redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./database/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - strategic-planning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    sysctls:
      - net.core.somaxconn=65535

  # Neo4j - Graph Database (connects to existing instance)
  neo4j:
    image: neo4j:5.15-enterprise
    container_name: strategic-planning-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_PLUGINS=["apoc", "graph-data-science", "n10s"]
      - NEO4J_dbms_memory_heap_initial__size=2G
      - NEO4J_dbms_memory_heap_max__size=4G
      - NEO4J_dbms_memory_pagecache_size=2G
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*,n10s.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*,gds.*,n10s.*
      - NEO4J_dbms_routing_default__router=SERVER
      - NEO4J_dbms_connector_bolt_enabled=true
      - NEO4J_dbms_connector_http_enabled=true
      - NEO4J_dbms_logs_query_enabled=INFO
      - NEO4J_dbms_logs_query_threshold=0
      - NEO4J_dbms_logs_query_parameter__logging__enabled=true
      - NEO4J_dbms_logs_query_time__logging__enabled=true
      - NEO4J_dbms_logs_query_allocation__logging__enabled=true
      - NEO4J_dbms_logs_query_page__logging__enabled=true
      - NEO4J_metrics_enabled=true
      - NEO4J_metrics_csv_enabled=true
      - NEO4J_metrics_csv_interval=30s
      - NEO4J_metrics_jmx_enabled=true
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/var/lib/neo4j/plugins
      - ./database/neo4j/init:/init:ro
      - ./database/neo4j/backups:/backups
    networks:
      - strategic-planning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    ulimits:
      nofile:
        soft: 65535
        hard: 65535

  # Nginx - Reverse Proxy and Load Balancer
  nginx:
    image: nginx:alpine
    container_name: strategic-planning-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - strategic-planning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: strategic-planning-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alerts:/etc/prometheus/alerts:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - strategic-planning-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: strategic-planning-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3001
      - GF_INSTALL_PLUGINS=neo4j-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - strategic-planning-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Elasticsearch - Logging and Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: strategic-planning-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - xpack.monitoring.collection.enabled=true
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - strategic-planning-network
    restart: unless-stopped
    profiles:
      - logging
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536

  # Logstash - Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: strategic-planning-logstash
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      - LS_JAVA_OPTS=-Xms1g -Xmx1g
    volumes:
      - ./logging/logstash/config:/usr/share/logstash/config:ro
      - ./logging/logstash/pipeline:/usr/share/logstash/pipeline:ro
    depends_on:
      - elasticsearch
    networks:
      - strategic-planning-network
    restart: unless-stopped
    profiles:
      - logging

  # Kibana - Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: strategic-planning-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
    depends_on:
      - elasticsearch
    networks:
      - strategic-planning-network
    restart: unless-stopped
    profiles:
      - logging

networks:
  strategic-planning-network:
    driver: bridge
    name: strategic-planning-network
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # Database volumes
  postgres_data:
    driver: local
    name: strategic-planning-postgres-data
  redis_data:
    driver: local
    name: strategic-planning-redis-data
  neo4j_data:
    driver: local
    name: strategic-planning-neo4j-data
  neo4j_logs:
    driver: local
    name: strategic-planning-neo4j-logs
  neo4j_import:
    driver: local
    name: strategic-planning-neo4j-import
  neo4j_plugins:
    driver: local
    name: strategic-planning-neo4j-plugins
  
  # Monitoring volumes
  prometheus_data:
    driver: local
    name: strategic-planning-prometheus-data
  grafana_data:
    driver: local
    name: strategic-planning-grafana-data
  
  # Logging volumes
  elasticsearch_data:
    driver: local
    name: strategic-planning-elasticsearch-data