name: AI Agent Platform - CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # SonarQube Analysis
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Run frontend tests with coverage
        run: pnpm --filter frontend run test:coverage
        continue-on-error: true

      - name: Run backend tests with coverage
        run: |
          cd apps/backend
          pip install -r requirements.txt
          pip install pytest pytest-cov
          pytest --cov=. --cov-report=xml
        continue-on-error: true

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        if: env.SONAR_TOKEN != ''

  # Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./apps/frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint
        continue-on-error: false

      - name: Run type checking
        run: npm run typecheck
        continue-on-error: false

      - name: Run unit tests with coverage
        run: npm run test:coverage
        env:
          CI: true

      - name: Enforce coverage thresholds
        run: |
          if [ ! -f "coverage/coverage-summary.json" ]; then
            echo "‚ùå Coverage report not found"
            exit 1
          fi
          
          # Extract coverage percentages
          LINES=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          STATEMENTS=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')
          FUNCTIONS=$(cat coverage/coverage-summary.json | jq '.total.functions.pct')
          BRANCHES=$(cat coverage/coverage-summary.json | jq '.total.branches.pct')
          
          echo "üìä Frontend Coverage Report:"
          echo "Lines: ${LINES}%"
          echo "Statements: ${STATEMENTS}%"
          echo "Functions: ${FUNCTIONS}%"
          echo "Branches: ${BRANCHES}%"
          
          # Check thresholds (90% for unit tests)
          if (( $(echo "$LINES < 90" | bc -l) )); then
            echo "‚ùå Line coverage ${LINES}% is below threshold (90%)"
            exit 1
          fi
          if (( $(echo "$STATEMENTS < 90" | bc -l) )); then
            echo "‚ùå Statement coverage ${STATEMENTS}% is below threshold (90%)"
            exit 1
          fi
          if (( $(echo "$FUNCTIONS < 90" | bc -l) )); then
            echo "‚ùå Function coverage ${FUNCTIONS}% is below threshold (90%)"
            exit 1
          fi
          if (( $(echo "$BRANCHES < 85" | bc -l) )); then
            echo "‚ùå Branch coverage ${BRANCHES}% is below threshold (85%)"
            exit 1
          fi
          
          echo "‚úÖ All coverage thresholds met!"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./apps/frontend/coverage/lcov.info,./apps/frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: true

  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/backend

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test_aiplatform
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7.2-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      neo4j:
        image: neo4j:5.15-community
        env:
          NEO4J_AUTH: neo4j/test_password
          NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
          NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
        options: >-
          --health-cmd "cypher-shell -u neo4j -p test_password 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 7474:7474
          - 7687:7687

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: ./apps/backend/requirements*.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run linting
        run: |
          black --check .
          isort --check-only .
          flake8 .
        continue-on-error: false

      - name: Run type checking
        run: mypy .
        continue-on-error: false

      - name: Run security scanning
        run: |
          bandit -r . -f json -o security-report.json || true
          safety check --json --output safety-report.json || true
        continue-on-error: true

      - name: Run unit tests with coverage
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_aiplatform
          REDIS_URL: redis://localhost:6379
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: test_password
          ENVIRONMENT: test
          SECRET_KEY: test_secret_key_for_ci
          OPENROUTER_API_KEY: test_api_key
        run: |
          # Run tests with coverage
          pytest -v --tb=short
          
      - name: Enforce coverage thresholds
        run: |
          if [ ! -f "coverage.xml" ]; then
            echo "‚ùå Coverage report not found"
            exit 1
          fi
          
          # Extract coverage from XML report
          COVERAGE=$(python -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('coverage.xml')
          root = tree.getroot()
          line_rate = float(root.attrib['line-rate']) * 100
          branch_rate = float(root.attrib['branch-rate']) * 100
          print(f'{line_rate:.2f},{branch_rate:.2f}')
          ")
          
          LINE_COVERAGE=$(echo $COVERAGE | cut -d',' -f1)
          BRANCH_COVERAGE=$(echo $COVERAGE | cut -d',' -f2)
          
          echo "üìä Backend Coverage Report:"
          echo "Line Coverage: ${LINE_COVERAGE}%"
          echo "Branch Coverage: ${BRANCH_COVERAGE}%"
          
          # Check thresholds (90% for unit tests, 80% for integration)
          if (( $(echo "$LINE_COVERAGE < 90" | bc -l) )); then
            echo "‚ùå Line coverage ${LINE_COVERAGE}% is below threshold (90%)"
            exit 1
          fi
          if (( $(echo "$BRANCH_COVERAGE < 85" | bc -l) )); then
            echo "‚ùå Branch coverage ${BRANCH_COVERAGE}% is below threshold (85%)"
            exit 1
          fi
          
          echo "‚úÖ All coverage thresholds met!"

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_aiplatform
          REDIS_URL: redis://localhost:6379
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: test_password
          ENVIRONMENT: test
          SECRET_KEY: test_secret_key_for_ci
          OPENROUTER_API_KEY: test_api_key
        run: |
          pytest tests/integration/ -v --tb=short -m integration
        continue-on-error: false

      - name: Generate test reports
        run: |
          mkdir -p reports
          pytest --junitxml=reports/junit.xml --html=reports/report.html --self-contained-html
        if: always()

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./apps/backend/coverage.xml,./apps/backend/coverage.lcov
          flags: backend
          name: backend-coverage
          fail_ci_if_error: true

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-test-reports
          path: |
            apps/backend/reports/
            apps/backend/htmlcov/
            apps/backend/security-report.json
            apps/backend/safety-report.json
          retention-days: 30

  # E2E Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./apps/frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./apps/frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./apps/frontend
        run: npx playwright install --with-deps

      - name: Start services with Docker Compose
        run: |
          docker-compose up -d postgres redis neo4j
          sleep 30  # Wait for databases to be ready

      - name: Setup backend
        working-directory: ./apps/backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          # Wait for databases and run migrations
          sleep 10
          python -c "
          import asyncio
          import sys
          from core.database import engine
          from sqlalchemy import text
          
          async def check_db():
              try:
                  async with engine.begin() as conn:
                      await conn.execute(text('SELECT 1'))
                  print('‚úÖ Database connection successful')
              except Exception as e:
                  print(f'‚ùå Database connection failed: {e}')
                  sys.exit(1)
          
          asyncio.run(check_db())
          "

      - name: Start backend server
        working-directory: ./apps/backend
        run: |
          uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 10
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_aiplatform
          REDIS_URL: redis://localhost:6379
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: development
          ENVIRONMENT: test
          SECRET_KEY: test_secret_key_for_e2e
          OPENROUTER_API_KEY: test_api_key

      - name: Start frontend server
        working-directory: ./apps/frontend
        run: |
          npm run dev &
          sleep 20
        env:
          NUXT_PUBLIC_API_BASE_URL: http://localhost:8000

      - name: Wait for services to be ready
        run: |
          # Wait for backend
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
          # Wait for frontend
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run E2E tests
        working-directory: ./apps/frontend
        run: npm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          CI: true

      - name: Enforce E2E test coverage (80%+ integration coverage)
        working-directory: ./apps/frontend
        run: |
          if [ -f "reports/playwright-results.json" ]; then
            TOTAL_TESTS=$(cat reports/playwright-results.json | jq '.stats.expected')
            PASSED_TESTS=$(cat reports/playwright-results.json | jq '.stats.passed')
            
            if [ "$TOTAL_TESTS" -gt 0 ]; then
              PASS_RATE=$(echo "scale=2; $PASSED_TESTS * 100 / $TOTAL_TESTS" | bc)
              echo "üìä E2E Test Results:"
              echo "Total Tests: $TOTAL_TESTS"
              echo "Passed Tests: $PASSED_TESTS" 
              echo "Pass Rate: ${PASS_RATE}%"
              
              # Require 80% pass rate (integration coverage threshold)
              if (( $(echo "$PASS_RATE < 80" | bc -l) )); then
                echo "‚ùå E2E test pass rate ${PASS_RATE}% is below threshold (80%)"
                exit 1
              fi
              echo "‚úÖ E2E test coverage threshold met!"
            fi
          fi

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: |
            apps/frontend/playwright-report/
            apps/frontend/test-results/
            apps/frontend/reports/
          retention-days: 30

      - name: Upload E2E test videos
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-videos
          path: apps/frontend/test-results/
          retention-days: 7

  # Build and Push Images
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, frontend-test, backend-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        component: [frontend, backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, e2e-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        env:
          DOCKER_HOST: ${{ secrets.STAGING_DOCKER_HOST }}
          DOCKER_TLS_VERIFY: 1
          DOCKER_CERT_PATH: /tmp/docker
        run: |
          # Setup Docker client certificates
          mkdir -p /tmp/docker
          echo "${{ secrets.STAGING_DOCKER_CA }}" > /tmp/docker/ca.pem
          echo "${{ secrets.STAGING_DOCKER_CERT }}" > /tmp/docker/cert.pem
          echo "${{ secrets.STAGING_DOCKER_KEY }}" > /tmp/docker/key.pem
          chmod 400 /tmp/docker/*.pem

          # Deploy stack
          export IMAGE_TAG=${GITHUB_SHA}
          envsubst < docker-stack.yml | docker stack deploy --compose-file - aiplatform-staging

      - name: Run smoke tests
        run: |
          sleep 60  # Wait for deployment
          curl -f https://staging.aiplatform.example.com/health || exit 1

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        env:
          DOCKER_HOST: ${{ secrets.PRODUCTION_DOCKER_HOST }}
          DOCKER_TLS_VERIFY: 1
          DOCKER_CERT_PATH: /tmp/docker
        run: |
          # Setup Docker client certificates
          mkdir -p /tmp/docker
          echo "${{ secrets.PRODUCTION_DOCKER_CA }}" > /tmp/docker/ca.pem
          echo "${{ secrets.PRODUCTION_DOCKER_CERT }}" > /tmp/docker/cert.pem
          echo "${{ secrets.PRODUCTION_DOCKER_KEY }}" > /tmp/docker/key.pem
          chmod 400 /tmp/docker/*.pem

          # Deploy stack
          export IMAGE_TAG=${GITHUB_SHA}
          envsubst < docker-stack.yml | docker stack deploy --compose-file - aiplatform-production

      - name: Run production health checks
        run: |
          sleep 120  # Wait for deployment
          curl -f https://api.aiplatform.example.com/health || exit 1
          curl -f https://app.aiplatform.example.com/health || exit 1

  # Notification
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: Notify on success
        if: ${{ needs.deploy-production.result == 'success' }}
        run: |
          echo "üöÄ Deployment to production successful!"
          # Add Slack/Discord/Teams notification here

      - name: Notify on failure
        if: ${{ needs.deploy-production.result == 'failure' }}
        run: |
          echo "‚ùå Deployment to production failed!"
          # Add Slack/Discord/Teams notification here
